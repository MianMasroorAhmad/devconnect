# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI

# Grant explicit permissions to the GITHUB_TOKEN used by actions.
permissions:
  contents: read
  packages: write
  id-token: write

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      # Default temp secret â€” repository secret will be injected if present
      JWT_SECRET: 'devconnect-ci-temp-secret-please-rotate-CHANGE_ME'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Inject JWT secret from repository (if provided)
        # This step correctly overrides the default env var if a secret exists
        run: |
          if [ -n "${{ secrets.JWT_SECRET }}" ]; then
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven local repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build & test
        # This command correctly uses the JWT_SECRET from the environment
        run: mvn -B -DskipTests=false -Djwt.secret="$JWT_SECRET" test

  docker-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set image name
        id: image
        run: |
          OWNER_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/${OWNER_REPO}:${{ github.sha }}
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image (and push for main/master)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
          tags: ${{ steps.image.outputs.image }}

      - name: Run Trivy scan (produce JSON report)
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $GITHUB_WORKSPACE:/workspace \
            aquasec/trivy image \
              --format json \
              --output /workspace/trivy-report.json \
              --severity HIGH,CRITICAL \
              ${{ steps.image.outputs.image }}
        shell: bash

      - name: Enforce Trivy policy (fail on HIGH/CRITICAL)
        if: always()
        run: |
          if [ -f trivy-report.json ]; then
            count=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length' trivy-report.json)
            echo "Found $count HIGH/CRITICAL vulnerabilities"
            if [ "$count" -gt 0 ]; then
              echo "Failing due to Trivy HIGH/CRITICAL vulnerabilities"
              cat trivy-report.json
              exit 1
            fi
          else
            echo "trivy-report.json not found; skipping enforcement"
          fi
        shell: bash

      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  mock-deploy:
    needs: docker-scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    env:
      JWT_SECRET: 'devconnect-ci-temp-secret-please-rotate-CHANGE_ME'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Inject JWT secret from repository (if provided)
        run: |
          if [ -n "${{ secrets.JWT_SECRET }}" ]; then
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build package (skip tests)
        run: mvn -B -DskipTests package

      - name: Start application (background)
        run: |
          nohup java -Djwt.secret="$JWT_SECRET" -jar target/devconnect-*.jar > app.log 2>&1 &
          echo $! > app.pid
          # wait for startup (poll up to 60s)
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -sSf http://localhost:8080/actuator/health >/dev/null; then
              echo "Application started successfully."
              break
            fi
            sleep 2
          done
        shell: bash

      - name: Smoke test
        run: |
          if ! curl -sSf http://localhost:8080/actuator/health | jq .; then
            echo "Smoke test failed. Application log:"
            cat app.log
            exit 1
          fi
        shell: bash

      - name: Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill "$(cat app.pid)" || true
          else
            pkill -f devconnect || true
          fi
        shell: bash
